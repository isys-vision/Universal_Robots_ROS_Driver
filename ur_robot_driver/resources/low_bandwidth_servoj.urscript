{{BEGIN_REPLACE}}

global JOINT_NUM               = 6
global SERVOJ_TIME             = {{SERVOJ_TIME}}
global SERVOJ_TIME_WAITING     = {{SERVOJ_TIME_WAITING}}
global EMPTY_VALUES            = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
global SERVOJ_GAIN             = {{SERVOJ_GAIN}}
global SERVOJ_LOOKAHEAD_TIME   = {{SERVOJ_LOOKAHEAD_TIME}}
global CONNECTION_NAME         = "reverse_connection"
global REVERSE_IP              = "{{REVERSE_IP}}"
global REVERSE_PORT            = {{REVERSE_PORT}}
global MAX_JOINT_DIFFERENCE    = {{MAX_JOINT_DIFFERENCE}}
global g_position_previous = EMPTY_VALUES
global g_position_target   = EMPTY_VALUES
global g_position_next     = EMPTY_VALUES
global g_velocity_previous = EMPTY_VALUES
global g_velocity_target   = EMPTY_VALUES
global g_velocity_next     = EMPTY_VALUES
global g_time_previous = 0.0
global g_time_target   = 0.0
global g_time_next     = 0.0
global g_received_waypoints_number  = -1
global g_requested_waypoints_number = -1
global g_stopping = False
global g_trajectory_finished = False

def send_message(message):
    socket_send_string(message, CONNECTION_NAME)
    socket_send_byte(10, CONNECTION_NAME)
end

def is_waypoint_sentinel(waypoint):
    return waypoint[1] == True
end

def is_final_position_reached(position):
    local l_current_position = get_actual_joint_positions()
    local l_index = 0
    while l_index < JOINT_NUM:
        if norm(position[l_index] - l_current_position[l_index]) > MAX_JOINT_DIFFERENCE:
            return False
        end
        l_index = l_index + 1
    end
    return True
end

def interpolate(time_within_segment, total_segment_time, start_pos, l_end_pos, l_start_vel, end_vel):
    local a = start_pos
    local b = l_start_vel
    local c = (-3 * a + 3 * l_end_pos - 2 * total_segment_time * b - total_segment_time * end_vel) / pow(total_segment_time, 2)
    local d = (2 * a - 2 * l_end_pos + total_segment_time * b + total_segment_time * end_vel) / pow(total_segment_time, 3)
    return a + b * time_within_segment + c * pow(time_within_segment, 2) + d * pow(time_within_segment, 3)
end

def add_next_waypoint(waypoint):
    enter_critical
    g_position_previous = g_position_target
    g_velocity_previous = g_velocity_target
    g_time_previous     = g_time_target
    g_position_target   = g_position_next
    g_velocity_target   = g_velocity_next
    g_time_target       = g_time_next
    g_position_next     = [waypoint[3], waypoint[4], waypoint[5], waypoint[6], waypoint[7], waypoint[8]]
    g_velocity_next     = [waypoint[9], waypoint[10], waypoint[11], waypoint[12], waypoint[13], waypoint[14]]
    g_time_next         = waypoint[15]
    g_received_waypoints_number = waypoint[2]
    exit_critical
end

thread controllingThread():
    local l_received_waypoints_number = -1
    local l_requested_waypoints_number = -1
    local l_current_position = get_actual_joint_positions()
    local l_total_elapsed_time = 0
    enter_critical
    g_requested_waypoints_number = 2
    exit_critical
    while True:
    
        # Wait for incoming waypoints
        enter_critical
        l_requested_waypoints_number = g_requested_waypoints_number
        l_received_waypoints_number = g_received_waypoints_number
        exit_critical
        while l_received_waypoints_number < l_requested_waypoints_number:
            servoj(l_current_position,t=SERVOJ_TIME_WAITING,lookahead_time=SERVOJ_LOOKAHEAD_TIME,gain=SERVOJ_GAIN)
            enter_critical
            l_received_waypoints_number = g_received_waypoints_number
            exit_critical
            sync()
        end
        
        # Process new waypoint
        enter_critical
        local l_start_pos = g_position_previous
        local l_start_vel = g_velocity_previous
        local l_start_time = g_time_previous
        local l_end_pos = g_position_target
        local l_end_vel = g_velocity_target
        local l_end_time = g_time_target
        local l_stopping_at_end_pos = g_stopping
        g_requested_waypoints_number = g_requested_waypoints_number + 1
        g_trajectory_finished = False
        exit_critical

        l_current_position = l_start_pos

        local l_total_segment_time = l_end_time - l_start_time

        # Move to next waypoint
        while l_total_elapsed_time <= l_end_time:
            local l_segment_elapsed_time = l_total_elapsed_time - l_start_time
            j = 0
            while j < JOINT_NUM:
                l_current_position[j] = interpolate(l_segment_elapsed_time, l_total_segment_time, l_start_pos[j], l_end_pos[j], l_start_vel[j], l_end_vel[j])
                j = j + 1
            end
            servoj(l_current_position,t=SERVOJ_TIME,lookahead_time=SERVOJ_LOOKAHEAD_TIME,gain=SERVOJ_GAIN)
            l_total_elapsed_time = l_total_elapsed_time + SERVOJ_TIME

        end
        
        if l_stopping_at_end_pos:
            while not is_final_position_reached(l_end_pos):
                textmsg("Catching up on final position not reached first time.")
                servoj(l_end_pos,t=SERVOJ_TIME,lookahead_time=SERVOJ_LOOKAHEAD_TIME,gain=SERVOJ_GAIN)
            end
            textmsg("Final position reached.")
            
            enter_critical
            g_position_previous = EMPTY_VALUES
            g_position_target   = EMPTY_VALUES
            g_position_next     = EMPTY_VALUES
            g_velocity_previous = EMPTY_VALUES
            g_velocity_target   = EMPTY_VALUES
            g_velocity_next     = EMPTY_VALUES
            g_time_previous = 0.0
            g_time_target   = 0.0
            g_time_next     = 0.0
            l_total_elapsed_time = 0
            g_received_waypoints_number  = -1
            g_requested_waypoints_number = 2
            g_trajectory_finished = True
            exit_critical
            
            textmsg("Wait until finish has been sent.")
            local l_trajectory_finished = True
            while l_trajectory_finished:
                servoj(l_end_pos,t=SERVOJ_TIME,lookahead_time=SERVOJ_LOOKAHEAD_TIME,gain=SERVOJ_GAIN)
                enter_critical
                l_trajectory_finished = g_trajectory_finished
                exit_critical
                sync()
            end
        end
    end
end

thread sendingThread():
    local controlling_thread = run controllingThread()
    local l_sent_waypoints_number = -1
    local l_received_waypoints_number = -1
    local l_requested_waypoints_number = -1
    local l_stopping = False
    local l_trajectory_finished = False

    while True:
        enter_critical
        l_received_waypoints_number = g_received_waypoints_number
        l_requested_waypoints_number = g_requested_waypoints_number
        l_stopping = g_stopping
        l_trajectory_finished = g_trajectory_finished
        exit_critical
        
        if l_trajectory_finished:
            textmsg("Sending: Movement finished")
            send_message(-1)    # -1: Movement finished or canceled
            l_sent_waypoints_number = -1
            enter_critical
            g_trajectory_finished = False
            g_stopping = False
            exit_critical
        elif l_sent_waypoints_number <= l_requested_waypoints_number:
            send_message(l_sent_waypoints_number + 1)
        end
        
        if l_received_waypoints_number == (l_sent_waypoints_number + 1) and l_sent_waypoints_number < l_requested_waypoints_number and not l_stopping:
            l_sent_waypoints_number = l_sent_waypoints_number + 1
        end
        sync()
    end
    join controlling_thread
end


###### Main (Receiver) #######

textmsg("Starting low bandwidth trajectory follower")
socket_open(REVERSE_IP, REVERSE_PORT, CONNECTION_NAME)

local sending_thread = run sendingThread()
local l_requested_waypoints_number = -1
local l_received_waypoints_number = -1

# Receiving loop
while True:
    enter_critical
    l_requested_waypoints_number = g_requested_waypoints_number
    l_received_waypoints_number = g_received_waypoints_number
    exit_critical
    if l_requested_waypoints_number > l_received_waypoints_number:
        waypoint_received = socket_read_ascii_float(15, socket_name=CONNECTION_NAME,timeout=0)
        if waypoint_received[0] == 0:
            textmsg("No trajectory point received. Still waiting...")
        elif waypoint_received[0] != JOINT_NUM * 2 + 3:
            textmsg("Received wrong number of floats in trajectory. This is certainly not OK.")
            textmsg(waypoint_received[0])
            enter_critical
            g_stopping = True
            exit_critical
        elif is_waypoint_sentinel(waypoint_received):
            textmsg("Receiver: Sentinel received")
            add_next_waypoint(waypoint_received)
            enter_critical
            g_stopping = True
            exit_critical
        else:
            add_next_waypoint(waypoint_received)
        end
    end
    sync()
end
join sending_thread

socket_close(CONNECTION_NAME)
textmsg("Exiting the program")
